plot(data$timestamp[1:10], rep(0,10), ylim = c(0,0))
axis(1)
plot(data$timestamp[1:10], rep(0,10), ylim = c(0,0))
plot(data$timestamp[1:10], rep(0,10), ylim = c(0,0), axes=F)
axis(1)
plot(data$timestamp[1:10], rep(0,10), ylim = c(0,0))
View(data.count)
plot(data$timestamp[data.clean$userId == 'dandhroberts'], rep(0,10), ylim = c(0,0))
plot(data$timestamp[data.clean$userId == 'dandhroberts'], rep(0,52), ylim = c(0,0))
plot(data$timestamp[data$userId == 'dandhroberts'], rep(0,52), ylim = c(0,0))
plot(data$timestamp[data$userId == 'dandhroberts'], rep(0,52), ylim = c(0,0), xaxt = "n")
plot(data$timestamp[data$userId == 'dandhroberts'][40:52], rep(0,12), ylim = c(0,0))
plot(data$timestamp[data$userId == 'dandhroberts'][41:52], rep(0,12), ylim = c(0,0))
plot(data$timestamp[data$userId == 'dandhroberts'][41:47], rep(0,6), ylim = c(0,0))
plot(data$timestamp[data$userId == 'dandhroberts'][41:48], rep(0,6), ylim = c(0,0))
plot(data$timestamp[data$userId == 'dandhroberts'][41:46], rep(0,6), ylim = c(0,0))
plot(data$timestamp[data$userId == 'dandhroberts'][41:50], rep(0,10), ylim = c(0,0))
plot(data$timestamp[data$userId == 'dandhroberts'][41:52], rep(0,12), ylim = c(0,0))
plot(data$timestamp[data$userId == 'dandhroberts'], rep(0,52), ylim = c(0,0))
plot(data$timestamp[data$userId == 'scalland'], rep(0,80), ylim = c(0,0))
months(data$timestamp[1:10])
length(data$timestamp[which(data$userId == 'scalland' && month(data$timestamp) == 'August'])
length(data$timestamp[which(data$userId == 'scalland' && month(data$timestamp) == 'August')])
plot(data$timestamp[data$userId == 'scalland'], rep(0,80), ylim = c(0,0))
View(data.clean)
plot(data$timestamp[data$userId == 'scalland'][51:80], rep(0,30), ylim = c(0,0))
plot(data$timestamp[data$userId == 'scalland'][60:80], rep(0,21), ylim = c(0,0))
axis.POSIXct(1, at=seq(data$timestamp[60], data$timestamp[80], by="hour"), format="%H")
axis.Date(1, at=seq(data$timestamp[60], data$timestamp[80], by="hour"), format="%H")
data.plot <- data$timestamp[data$userId == 'scalland'][60:80]
plot(data.plot, rep(0,21), ylim = c(0,0))
axis.Date(1, at=seq(data.plot[60], data.plot[80], by="hour"), format="%H")
axis.POSIXlt(1, at=seq(data.plot[60], data.plot[80], by="hour"), format="%H")
data.plot[60]
data.plot[80]
data.plot
axis.Date(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%H")
plot(data.plot, rep(0,21), ylim = c(0,0))
axis.Date(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%H")
plot(data.plot, rep(0,21), ylim = c(0,0))
plot(data.plot, rep(0,21), ylim = c(0,0))
axis.Date(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%H")
axis.Date(1, at=seq(data.plot[1], data.plot[21], by="day"), format="%H")
plot(data.plot, rep(0,21), ylim = c(0,0))
axis.Date(1, at=seq(data.plot[1], data.plot[21], by="day"), format="%H")
axis.Date(1, at=seq(data.plot[1], data.plot[21], by="day"), format="%H")
axis.Date(1, at=seq(data.plot[1], data.plot[21], by="day"), format="%H")
plot(data.plot, rep(0,21), ylim = c(0,0))
axis.Date(1, at=seq(data.plot[1], data.plot[21], by="day"), format="%H")
axis.Date(1, at=seq(data.plot[1], data.plot[21], by="month"), format="%H")
plot(data.plot, rep(0,21), ylim = c(0,0))
axis.Date(1, at=seq(data.plot[1], data.plot[21], by="month"), format="%H")
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="month"), format="%H")
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%H")
plot(data.plot, rep(0,21), ylim = c(0,0))
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%H")
axis.POSIXlt(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%H")
axis.Date(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%H")
plot(data.plot, rep(0,21), ylim = c(0,0), xnax = 'n')
plot(data.plot, rep(0,21), ylim = c(0,0), xnan = 'n')
plot(data.plot, rep(0,21), ylim = c(0,0), axis = F)
plot(data.plot, rep(0,21), ylim = c(0,0), xaxt = 'n')
axis.Date(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%H")
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%H")
data.plot <- as.Date(data.plot)
plot(data.plot, rep(0,21), ylim = c(0,0), xaxt = 'n')
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%H")
data.plot <- data$timestamp[data$userId == 'scalland'][60:80]
data.plot <- as.Date(data.plot)
data.plot <- data$timestamp[data$userId == 'scalland'][60:80]
data.plot <- as.POSIXct(data.plot)
plot(data.plot, rep(0,21), ylim = c(0,0), xaxt = 'n')
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%H")
data.plot <- data$timestamp[data$userId == 'scalland'][60:80]
plot(data.plot, rep(0,21), ylim = c(0,0), xaxt = 'n')
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%H")
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%d")
plot(data.plot, rep(0,21), ylim = c(0,0), xaxt = 'n')
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="hour"), format="%d")
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="day"), format="%d")
plot(data.plot, rep(0,21), ylim = c(0,0), xaxt = 'n')
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="day"), format="%d")
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="day"), format="%Y")
plot(data.plot, rep(0,21), ylim = c(0,0), xaxt = 'n')
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="day"), format="%Y")
plot(data.plot, rep(0,21), ylim = c(0,0), xaxt = 'n')
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="month"), format="%m")
seq(data.plot[1], data.plot[21], by="month")
data.plot[21]
data.plot
plot(data.plot, rep(0,21), ylim = c(0,0), xaxt = 'n')
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="minute"), format="%m")
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="min"), format="%m")
plot(data.plot, rep(0,21), ylim = c(0,0), xaxt = 'n')
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="sec"), format="%s")
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="sec"), format="%S")
plot(data.plot, rep(0,21), ylim = c(0,0), xaxt = 'n')
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="sec"), format="%S")
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="min"), format="%m")
plot(data.plot, rep(0,21), ylim = c(0,0), xaxt = 'n')
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="min"), format="%m")
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="min"), format="%M")
plot(data.plot, rep(0,21), ylim = c(0,0), xaxt = 'n')
axis.POSIXct(1, at=seq(data.plot[1], data.plot[21], by="min"), format="%M")
data.likes <- data[data$action == 'Liked',]
View(data.likes)
save.image("~/enviroment.RData")
data.likes <- arrange(data.likes, data.likes$title, data.likes$timestamp)
View(data.likes)
data.likes$action <- rep(1, nrow(data.likes))
View(data.likes)
test <- ddply(data.likes, .(title), transform, answer = cumsum(data$action))
test <- ddply(data.likes, .(title), transform, answer = cumsum(data.likes$action))
nrows(data.likes)
nrow(data.likes)
length(data.likes$action)
length(data.likes$title)
test <- ddply(data.likes, .(title), transform, answer = cumsum(action))
data.likes$timestamp <- as.Character(data.likes$timestamp)
data.likes$timestamp <- as.character(data.likes$timestamp)
test <- ddply(data.likes, .(title), transform, answer = cumsum(action))
data.likes$timestamp <- as.POSIXlt(data.likes$timestamp)
View(data.likes)
View(test)
count.movies <- count(data.likes$title)
View(count.movies)
popular_movies <- count.movies$x[count.movies$freq >= 10]
data.likes$timestamp <- as.character(data.likes$timestamp)
data.likes <- ddply(data.likes, .(title), transform, answer = cumsum(action))
data.likes$timestamp <- as.POSIXlt(data.likes$timestamp)
# Get counts of movies, then subset likes by most popular
data.popular <- data.likes[data.likes$title %in% popular_movies,]
require(rCharts)
require(reshape2)
x1 <- xPlot(action ~ timestamp, group = "category", data = data.popular, type = "line-dotted")
x1 <- xPlot(action ~ timestamp, group = "title", data = data.popular, type = "line-dotted")
data.likes$timestamp <- as.character(data.likes$timestamp)
x1 <- xPlot(action ~ timestamp, group = "title", data = data.popular, type = "line-dotted")
View(data.popular)
x1 <- xPlot(answer ~ timestamp, group = "title", data = data.popular, type = "line-dotted")
x1 <- xPlot(answer ~ timestamp, group = "title", data = data.popular[,names(data.popular) %in% c('title', 'timestamp', 'answer')], type = "line-dotted")
data.likes$timestamp <- as.POSIXlt(data.likes$timestamp)
data.popular$timestamp <- as.character(data.likes$timestamp)
data.popular$timestamp <- as.character(data.popular$timestamp)
x1 <- xPlot(answer ~ timestamp, group = "title", data = data.popular, type = "line-dotted")
x1$print("chart4")
x1
x1 <- nPlot(answer ~ timestamp, group = "title", data = data.popular, type = "lineChart")
x1
x1 <- xPlot(answer ~ timestamp, group = "title", data = data.popular, type = "line-dotted")
x1$print("chart4")
x1
df = read.csv("regression_data.csv")
ls
`
q
quit
setwd("~/Desktop/Pronto Competition")
df = read.csv("regression_data.csv")
packages.install('quantreg')
package.install('quantreg')
install.packages('quantreg')
attach(df)
df.columns
colnames(df)
df$from_station_id = as.factor(df$from_station_id)
u=seq(.05,.95,by=.01)
coefstd=function(u) summary(rq(bikeid~.,
tau=u))$coefficients[,2]
coefest=function(u) summary(rq(bikeid~.,
tau=u))$coefficients[,1]
CS=Vectorize(coefstd)(u)
CE=Vectorize(coefest)(u)
k=2
plot(u,CE[k,],ylim=c(min(CE[k,]-2*CS[k,]),
max(CE[k,]+2*CS[k,])))
polygon(c(u,rev(u)),c(CE[k,]+1.96*CS[k,],
rev(CE[k,]-1.96*CS[k,])),
col="light green",border=NA)
lines(u,CE[k,],lwd=2,col="red")
abline(h=0)
library(quantreg)
u=seq(.05,.95,by=.01)
coefstd=function(u) summary(rq(bikeid~.,
tau=u))$coefficients[,2]
coefest=function(u) summary(rq(bikeid~.,
tau=u))$coefficients[,1]
CS=Vectorize(coefstd)(u)
CE=Vectorize(coefest)(u)
k=2
plot(u,CE[k,],ylim=c(min(CE[k,]-2*CS[k,]),
max(CE[k,]+2*CS[k,])))
polygon(c(u,rev(u)),c(CE[k,]+1.96*CS[k,],
rev(CE[k,]-1.96*CS[k,])),
col="light green",border=NA)
lines(u,CE[k,],lwd=2,col="red")
abline(h=0)
fit <- lm(bikeid~., data=df)
fit
df$dayofweek
df$MeanDew_Point_F[1:100]
names <- c('starthour','dayofweek','month','season','year')
df[names] <- lapply(df[names], as.factor)
fit <- lm(bikeid~., data=df)
fit
names <- c('starthour','dayofweek','month','season','year','day')
df[names] <- lapply(df[names], as.factor)
fit <- lm(bikeid~., data=df)
fit
df <- subset(df, select = -c('date') )
fit <- lm(bikeid~., data=df)
df = read.csv("regression_data.csv")
attach(df)
df = read.csv("regression_data.csv")
df$from_station_id = as.factor(df$from_station_id)
names <- c('starthour','dayofweek','month','season','year','day')
df[names] <- lapply(df[names], as.factor)
df <- subset(df, select = -c('date') )
df <- subset(df, select = -'date' )
df <- f[, !(colnames(df) %in% c("date"))]
df <- df[, !(colnames(df) %in% c("date"))]
fit <- lm(bikeid~., data=df)
fit
colnames(df)
fit <- lm(bikeid~., data=df)
fit
colnames(df)
df$Events[1:10]
names <- c('starthour','dayofweek','month','season','year','day','Events')
df[names] <- lapply(df[names], as.factor)
df <- df[, !(colnames(df) %in% c("date"))]
fit <- lm(bikeid~., data=df)
fit
head(df)
df = read.csv("regression_data.csv")
names <- c('starthour','dayofweek','month','season','year','day','Events','from_station_id')
df[names] <- lapply(df[names], as.factor)
df <- df[, !(colnames(df) %in% c("date"))]
head(df)
fit <- lm(bikeid~., data=df)
fit
fit <- lm(bikeid~., data=df)
df <- na.omit(df)
fit <- lm(bikeid~., data=df)
df <- na.omit(df)
fit <- lm(bikeid~., data=df)
fit
colnames(df)
head(df)
df$bikeid <- as.int(df$bikeid)
df$bikeid <- as.integer(df$bikeid)
fit <- lm(bikeid~., data=df)
lapply(dataframe.df[colnames(df)], unique)
lapply(df[colnames(df)], unique)
df[df == '-'] <- NA
df <- na.omit(df)
fit <- lm(bikeid~., data=df)
fit
colnames(df)
lapply(df[colnames(df)], unique)
df = read.csv("regression_data.csv")
names <- c('starthour','dayofweek','month','season','year','day','Events','from_station_id')
df[names] <- lapply(df[names], as.factor)
lapply(df[colnames(df)], unique)
df <- df[, !(colnames(df) %in% c("date","season"))]
fit <- lm(bikeid~., data=df)
fit
summar(fit)
summary(fit)
df = read.csv("regression_data.csv")
names <- c('starthour','dayofweek','month','season','year','day','Events','from_station_id')
df[names] <- lapply(df[names], as.factor)
df$bikeid <- as.integer(df$bikeid)
df <- df[, !(colnames(df) %in% c("date"))]
head(df)
df[df == '-'] <- NA
df <- na.omit(df)
fit <- lm(bikeid~., data=df)
fit
colnames(df)
summary(fit)
head(df)
df$season
summary(fit)
df <- df[, !(colnames(df) %in% c("date",'day'))]
head(df)
df[df == '-'] <- NA
df <- na.omit(df)
fit <- lm(bikeid~., data=df)
fit
colnames(df)
summary(fit)
df <- df[, !(colnames(df) %in% c("date",'day','month'))]
fit <- lm(bikeid~., data=df)
fit
colnames(df)
summary(fit)
df = read.csv("regression_data.csv")
names <- c('starthour','dayofweek','month','season','year','day','Events','from_station_id')
df[names] <- lapply(df[names], as.factor)
df$bikeid <- as.integer(df$bikeid)
df <- df[, !(colnames(df) %in% c("date",'day','season'))]
head(df)
df[df == '-'] <- NA
df <- na.omit(df)
fit <- lm(bikeid~., data=df)
fit
colnames(df)
summary(fit)
df$Max_Gust_Speed_MPH <- as.integer(df$Max_Gust_Speed_MPH)
fit <- lm(bikeid~., data=df)
summary(fit)
plot(df$bikeid, fit.res,  ylab="Residuals", xlab="Waiting Time", main="Old Faithful Eruptions")
fit.res
fit.residuals
plot(df$bikeid, residuals(fit),  ylab="Residuals", xlab="Waiting Time", main="Old Faithful Eruptions")
abline(0, 0)
plot(residuals(fit))
abline(0, 0)
qqnorm(resid(fit)) # A quantile normal plot - good for checking normality
qqline(resid(fit))
plot(df$bikeid,residuals(fit))
df$bikeid <- log(df$bikeid)
fit <- lm(bikeid~., data=df)
summary(fit)
plot(df$bikeid,residuals(fit))
plot(fit.predict(df$bikeid),residuals(fit))
plot(predict(fit),residuals(fit))
predict(fit)
df = read.csv("regression_data.csv")
names <- c('starthour','dayofweek','month','season','year','day','Events','from_station_id')
df[names] <- lapply(df[names], as.factor)
df$bikeid <- as.integer(df$bikeid)
df$bikeid <- log(df$bikeid)
df = read.csv("regression_data.csv")
names <- c('starthour','dayofweek','month','season','year','day','Events','from_station_id')
df[names] <- lapply(df[names], as.factor)
df$bikeid <- as.integer(df$bikeid)
df$Max_Gust_Speed_MPH <- as.integer(df$Max_Gust_Speed_MPH)
df <- df[, !(colnames(df) %in% c("date",'day','season'))]
head(df)
df[df == '-'] <- NA
df <- na.omit(df)
fit <- lm(bikeid~., data=df)
summary(fit)
plot(predict(fit),residuals(fit))
df$bikeid <- log(df$bikeid)
fit <- lm(bikeid~., data=df)
plot(predict(fit),residuals(fit))
library(glb)
library(glm)
library(gbm)
fit <- gbm(bikeid~., data=df)
fit <- gbm(bikeid~., data=df, distribution = 'poisson')
df <- df[, !(colnames(df) %in% c("date",'day','season','Max_Visibility_Miles'))]
fit <- gbm(bikeid~., data=df, distribution = 'poisson')
df = read.csv("regression_data.csv")
names <- c('starthour','dayofweek','month','season','year','day','Events','from_station_id')
df[names] <- lapply(df[names], as.factor)
df$bikeid <- as.integer(df$bikeid)
df$Max_Gust_Speed_MPH <- as.integer(df$Max_Gust_Speed_MPH)
df <- df[, !(colnames(df) %in% c("date",'day','season','Max_Visibility_Miles'))]
df[df == '-'] <- NA
df <- na.omit(df)
fit <- gbm(bikeid~., data=df, distribution = 'poisson')
summary(fit)
df <- df[, !(colnames(df) %in% c("date",'day','season','Max_Visibility_Miles','from_station_id '))]
fit <- gbm(bikeid~., data=df, distribution = 'poisson')
summary(fit)
library(glm)
package.install('glm')
install.package('glm')
install.packages('glm')
library(glm)
library(glm)
install.packages('glm')
?glm
library(glm)
install.packages('glm')
library('glm')
install.packages('glm2')
library(glm2)
fit <- glm2(bikeid~., data=df, distribution = 'poisson')
fit <- glm2(bikeid~., data=df, family = 'poisson')
summary(fit)
plot(predict(fit),residuals(fit))
qqnorm(resid(fit)) # A quantile normal plot - good for checking normality
plot(predict(fit),residuals(fit))
df$bikeid
predict(fit)
fit <- glm2.nb(bikeid~., data=df)
fit <- glm.nb(bikeid~., data=df)
fit <- glm2.nb(bikeid~., data=df, family = 'binomial')
fit <- glm2(bikeid~., data=df, family = 'binomial')
library(glm)
install.packages('glm')
library('glm')
library(glm)
library(MASS)
fit <- glmnb(bikeid~., data=df)
fit <- glm.nb(bikeid~., data=df)
summary(fit)
plot(predict(fit),residuals(fit))
df$bikeid
predict(fit)
predict(fit)[1:100]
predict(fit)[100:200]
summary(fit)
fit <- lm(bikeid~., data=df)
summary(fit)
plot(predict(fit),residuals(fit))
df = read.csv("regression_data.csv")
names <- c('starthour','dayofweek','month','season','year','day','Events','from_station_id')
df[names] <- lapply(df[names], as.factor)
df$bikeid <- as.integer(df$bikeid)
df$bikeid <- log(df$bikeid)
df$Max_Gust_Speed_MPH <- as.integer(df$Max_Gust_Speed_MPH)
df <- df[, !(colnames(df) %in% c("date",'day','season','Max_Visibility_Miles','from_station_id '))]
head(df)
df[df == '-'] <- NA
df <- na.omit(df)
fit <- glm2(bikeid~., data=df, family = 'binomial')
summary(fit)
df = read.csv("regression.csv")
names <- c('hour','dayofweek','month','season','year','terminal', 'hood')
df[names] <- lapply(df[names], as.factor)
df$count <- as.integer(df$count)
df$count <- log(df$count)
df$Max_Gust_Speed_MPH <- as.integer(df$Max_Gust_Speed_MPH)
fit <- lm(count~., data=df)
df <- na.omit(df)
fit <- lm(count~., data=df)
summary(fit)
fit <- lm(count~., data=df)
df[which(is.nan(df))] = NA
df$count[which(is.nan(df$count))] = NA
df$count[which(df$count==Inf)] = NA
fit <- lm(count~., data=df)
df$count
df = read.csv("regression.csv")
names <- c('hour','dayofweek','month','season','year','terminal', 'hood')
df[names] <- lapply(df[names], as.factor)
df$count <- as.integer(df$count)
df$count <- log(df$count)
df$count
df = read.csv("regression.csv")
names <- c('hour','dayofweek','month','season','year','terminal', 'hood')
df[names] <- lapply(df[names], as.factor)
df$count <- as.integer(df$count)
#df$count <- log(df$count)
df$Max_Gust_Speed_MPH <- as.integer(df$Max_Gust_Speed_MPH)
fit <- lm(count~., data=df)
summary(fit)
df <- df[, !(colnames(df) %in% c('terminal','season','Max_Visibility_Miles',))]
df <- df[, !(colnames(df) %in% c('terminal','season','Max_Visibility_Miles'))]
fit <- lm(count~., data=df)
summary(fit)
names <- c('hour','dayofweek','month','season','year','terminal', 'hood','timeperiod')
fit <- lm(count~., data=df)
summary(fit)
df$timeperiod
summary(fit)
df <- df[, !(colnames(df) %in% c('hour','terminal','season','Max_Visibility_Miles'))]
fit <- lm(count~., data=df)
summary(fit)
df = read.csv("regression.csv")
names <- c('hour','dayofweek','month','season','year','terminal', 'hood','timeperiod')
df[names] <- lapply(df[names], as.factor)
df$count <- as.integer(df$count)
#df$count <- log(df$count)
df$Max_Gust_Speed_MPH <- as.integer(df$Max_Gust_Speed_MPH)
df <- df[, !(colnames(df) %in% c('timeperiod','season','Max_Visibility_Miles'))]
fit <- lm(count~., data=df)
summary(fit)
df <- df[, !(colnames(df) %in% c('timeperiod','season','Max_Visibility_Miles','hood'))]
fit <- lm(count~., data=df)
summary(fit)
names <- c('hour','dayofweek','month','season','year','terminal', 'hood','timeperiod','smallgroups')
df[names] <- lapply(df[names], as.factor)
df = read.csv("regression.csv")
names <- c('hour','dayofweek','month','season','year','terminal', 'hood','timeperiod','smallgroups')
df[names] <- lapply(df[names], as.factor)
df$count <- as.integer(df$count)
df$Max_Gust_Speed_MPH <- as.integer(df$Max_Gust_Speed_MPH)
df_f <- df[, !(colnames(df) %in% c('timeperiod','season','Max_Visibility_Miles','hood','big_cluster'))]
fit <- lm(count~., data=df_f)
summary(fit)
df_f <- df[, !(colnames(df) %in% c('timeperiod','season','Max_Visibility_Miles','hood','big_cluster','smallgroups'))]
fit <- lm(count~., data=df_f)
summary(fit)
df_f <- df[, !(colnames(df) %in% c('terminal','timeperiod','season','Max_Visibility_Miles','hood','big_cluster','smallgroups'))]
fit <- lm(count~., data=df_f)
summary(fit)
df_f <- df[, !(colnames(df) %in% c('elevation','dockcount','timeperiod','season','Max_Visibility_Miles','hood','big_cluster','smallgroups'))]
fit <- lm(count~., data=df_f)
summary(fit)
plot(predict(fit),residuals(fit))
y <- predict(fit)
y[y < 0] <- 0
plot(y,residuals(fit))
qqline(y)
qqnorm(resid(fit)) # A quantile normal plot - good for checking normality
qqnorm(y) # A quantile normal plot - good for checking normality
df_f <- df[, !(colnames(df) %in% c('Mean_Temperature_F','Max_Temperature_F','Mean_Visibility_Mile','Min_Visibility_Miles','elevation','dockcount','timeperiod','season','Max_Visibility_Miles','hood','big_cluster','smallgroups'))]
fit <- lm(count~., data=df_f)
summary(fit)
df_f <- df[, !(colnames(df) %in% c('Min_Humidity','Mean_Temperature_F','Max_Temperature_F','Mean_Visibility_Mile','Min_Visibility_Miles','elevation','dockcount','timeperiod','season','Max_Visibility_Miles','hood','big_cluster','smallgroups'))]
fit <- lm(count~., data=df_f)
summary(fit)
df_f <- df[, !(colnames(df) %in% c('Max_Wind_Speed_MPH','Mean_Visibility_Miles','Min_Humidity','Mean_Temperature_F','Max_Temperature_F','Mean_Visibility_Mile','Min_Visibility_Miles','elevation','dockcount','timeperiod','season','Max_Visibility_Miles','hood','big_cluster','smallgroups'))]
fit <- lm(count~., data=df_f)
summary(fit)
